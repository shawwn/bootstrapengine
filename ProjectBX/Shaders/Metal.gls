//----------------------------------------------------------
// File:		blinn.gls
// Author:		Kevin Bray
// Created:		02-07-06
// Copyright © 2004 Bootstrap Games.  All rights reserved.
//----------------------------------------------------------

// constants.
const int kShadowSampleCount = 8;
const int kShadowSampleCountOver2 = kShadowSampleCount/2;
const float kShadowInvSampleCount = 1.0 / float( kShadowSampleCount );
const vec2 kShadowJitterTexScale = vec2( 0.03125, 0.03125 );			// 1 / 32
//const vec3 kShadowJitterTexScale = vec3( 0.0625, 0.0625, 0.0 );		// 1 / 16
//const vec3 kShadowJitterTexScale = vec3( 0.125, 0.125, 0.0 );			// 1 / 8
const half kMaxShadowPCFWidth = 0.5;

// vertex outputs.
varying vec3 v_LocalEyeVec;
varying vec3 v_LocalLightVec;
varying vec4 v_ProjTexCoord;
varying vec4 v_ShadowTexCoord;
varying vec2 v_BumpTexCoord;
varying vec2 v_NormalTexCoord;
varying vec2 v_DiffuseTexCoord;
varying vec2 v_SpecularTexCoord;

// uniforms.
uniform vec4 u_ViewPos;				// X,Y,Z,undef
uniform vec4 u_LightPos;			// X,Y,Z,undef
uniform vec4 u_LightDirOverride;	// X,Y,Z,[0=override;1=no override]
uniform vec4 u_LightProjS;
uniform vec4 u_LightProjT;
uniform vec4 u_LightProjQ;
uniform vec4 u_ShadowTexGenS;
uniform vec4 u_ShadowTexGenT;
uniform vec4 u_ShadowTexGenR;
uniform vec4 u_ShadowTexGenQ;
uniform vec4 u_BumpTexMatS;
uniform vec4 u_BumpTexMatT;
uniform vec4 u_NormalTexMatS;
uniform vec4 u_NormalTexMatT;
uniform vec4 u_DiffuseTexMatS;
uniform vec4 u_DiffuseTexMatT;
uniform vec4 u_SpecularTexMatS;
uniform vec4 u_SpecularTexMatT;
uniform vec4 u_LightColor;			// R,G,B,undef
uniform vec4 u_LightRange;			// range, range, range, 1/range
uniform vec4 u_LightAtten;			// squared atten, linear atten, 0, constant atten
uniform vec4 u_LightWidth;			// width, width, 0, 0
uniform vec4 u_LightHaze;			// haze, 1.0-haze, 0, 0
uniform vec4 u_BumpMod;
uniform vec4 u_BumpAdd;
uniform vec4 u_DiffuseMod;
uniform vec4 u_DiffuseAdd;
uniform vec4 u_SpecularMod;
uniform vec4 u_SpecularAdd;
uniform vec4 u_ShadowNear;
uniform vec4 u_FogStart;
uniform vec4 u_FogRange;
uniform vec4 u_FogColor;

// samplers.
uniform samplerCube s_NormalizeTexCube;
uniform sampler3D s_NoiseTableTex3D;
uniform sampler2D s_LightProjTex;
uniform sampler2D s_LightShadowTex;
uniform sampler2D s_LightShadowMaskTex;
uniform sampler2D s_ZLookupTex;
uniform sampler2D s_AttenTex;
uniform sampler2D s_BumpTex;
uniform sampler2D s_NormalTex;
uniform sampler2D s_DiffuseTex;
uniform sampler2D s_SpecularTex;

void vpMain()
{
	gl_Position = ftransform();

	// calculate the eye vector.
	vec3 localEyeVec = u_ViewPos.xyz - gl_Vertex.xyz;

	// calculate the light vector.
	vec3 localLightVec = u_LightPos.xyz - gl_Vertex.xyz;
	localLightVec = u_LightDirOverride.w * localLightVec + u_LightDirOverride.xyz;

	// transform the eye vector into tangent space.
	v_LocalEyeVec.x = dot( localEyeVec, gl_MultiTexCoord2.xyz );
	v_LocalEyeVec.y = dot( localEyeVec, gl_MultiTexCoord3.xyz );
	v_LocalEyeVec.z = dot( localEyeVec, gl_Normal.xyz );

	// transform the light vector into tangent space.
	v_LocalLightVec.x = dot( localLightVec, gl_MultiTexCoord2.xyz );
	v_LocalLightVec.y = dot( localLightVec, gl_MultiTexCoord3.xyz );
	v_LocalLightVec.z = dot( localLightVec, gl_Normal.xyz );

	// evaluate the projected texture texgens.
	v_ProjTexCoord.x = dot( gl_Vertex, u_LightProjS );
	v_ProjTexCoord.y = dot( gl_Vertex, u_LightProjT );
	v_ProjTexCoord.z = 0.0;
	v_ProjTexCoord.w = dot( gl_Vertex, u_LightProjQ );

	// evaluate the shadow texture texgens.
	v_ShadowTexCoord.x = dot( gl_Vertex, u_ShadowTexGenS );
	v_ShadowTexCoord.y = dot( gl_Vertex, u_ShadowTexGenT );
	v_ShadowTexCoord.z = dot( gl_Vertex, u_ShadowTexGenR );
	v_ShadowTexCoord.w = dot( gl_Vertex, u_ShadowTexGenQ );
	
	// calculate the bump map lookup.
	v_BumpTexCoord.x = dot( gl_MultiTexCoord0, u_BumpTexMatS );
	v_BumpTexCoord.y = dot( gl_MultiTexCoord0, u_BumpTexMatT );

	// calculate the normal map lookup.
	v_NormalTexCoord.x = dot( gl_MultiTexCoord0, u_NormalTexMatS );
	v_NormalTexCoord.y = dot( gl_MultiTexCoord0, u_NormalTexMatT );

	// calculate the diffuse map lookup.
	v_DiffuseTexCoord.x = dot( gl_MultiTexCoord0, u_DiffuseTexMatS );
	v_DiffuseTexCoord.y = dot( gl_MultiTexCoord0, u_DiffuseTexMatT );

	// calculate the specular map lookup.
	v_SpecularTexCoord.x = dot( gl_MultiTexCoord0, u_SpecularTexMatS );
	v_SpecularTexCoord.y = dot( gl_MultiTexCoord0, u_SpecularTexMatT );
}

void fpMain()
{
	//----------------------------------------------------
	// normalize incoming vectors.
	//----------------------------------------------------
	// normalize the eye vector using a texture lookup.
	half3 localEyeVec = 2.0 * textureCube( s_NormalizeTexCube, v_LocalEyeVec ).xyz - 1.0;

	// normalize the light vector with math and calculate both it's length, and it's
	// squared length.
	half localLightDistSqr = dot( v_LocalLightVec, v_LocalLightVec );
	half invLightDist = inversesqrt( localLightDistSqr );
	half localLightDist = invLightDist * localLightDistSqr;
	half3 localLightVec = invLightDist * v_LocalLightVec;

//	half localLightDist = length( v_LocalLightVec );
//	half3 localLightVec = normalize( v_LocalLightVec );

	// calculate the half angle and normalize with math.
	half3 localHalfVec = normalize( localLightVec + localEyeVec );

	//----------------------------------------------------
	// calculate attenuated light color as a combination of the light color and the
	// projected texture lookup.  Then scale by the attenuation terms.
	//----------------------------------------------------
	half3 light = u_LightColor.rgb;
	light *= texture2DProj( s_LightProjTex, v_ProjTexCoord ).rgb;
	light = v_ProjTexCoord.w <= 0.0 ? vec3( 0.0, 0.0, 0.0 ) : light;

	// calculate attenuation and scale the light color accordingly.
	half linAtten = clamp( -localLightDist * u_LightRange.w + 1.0, 0.0, 1.0 );	// 1-(d/r)
	light *= dot( vec4( linAtten * linAtten, linAtten, linAtten, 1.0 ), u_LightAtten );

	//----------------------------------------------------
	// Calculate the shadow.
	//----------------------------------------------------
	half3 jitterSTQ;
	jitterSTQ.xy = kShadowJitterTexScale.xy * gl_FragCoord.xy;
	jitterSTQ.z = 0.0;
	half center = 0.0;
	float4 shadowCoord = float4( 0.0, 0.0, v_ShadowTexCoord.z, v_ShadowTexCoord.w );
	for ( int i = 0; i < kShadowSampleCountOver2; ++i )
	{
		half4 jitter = 2.0 * texture3D( s_NoiseTableTex3D, jitterSTQ ) - 1.0;
		jitterSTQ.z += kShadowInvSampleCount;
		shadowCoord.xy = u_LightWidth.xx * jitter.xy + v_ShadowTexCoord.xy;
		center += shadow2DProj( s_LightShadowTex, shadowCoord ).x;
		shadowCoord.xy = u_LightWidth.xx * jitter.zw + v_ShadowTexCoord.xy;
		center += shadow2DProj( s_LightShadowTex, shadowCoord ).x;
	}

	// apply the shadow mask.
	light *= center * kShadowInvSampleCount;

	//----------------------------------------------------
	// lookup the bump and normal values.
	//----------------------------------------------------
	half bump = texture2D( s_BumpTex, v_BumpTexCoord ).a;
	bump = u_BumpMod.x * bump + u_BumpAdd.x;
	half2 uvOffset = bump * localEyeVec.xy;

	half3 normal = 2.0 * texture2D( s_NormalTex, v_NormalTexCoord + uvOffset ).wyz - 1.0;
	normal = normalize( normal );

	//----------------------------------------------------
	// Calculate the diffuse component.
	//----------------------------------------------------
	half4 diffuse = texture2D( s_DiffuseTex, v_DiffuseTexCoord + uvOffset );
	diffuse = u_DiffuseMod * diffuse + u_DiffuseAdd;
	diffuse.xyz *= clamp( dot( localLightVec, normal ), 0.0, 1.0 );
	diffuse.xyz *= light;

	//----------------------------------------------------
	// Calculate the specular component.
	//----------------------------------------------------
	half3 specular = texture2D( s_SpecularTex, v_SpecularTexCoord + uvOffset ).rgb;
	specular = u_SpecularMod.rgb * specular + u_SpecularAdd.rgb;
	half specularDP = clamp( dot( localHalfVec, normal ), 0.0, 1.0 );

	// perfom cross product to determine 1 over SIN NH (CSC NH)
	half3 specTemp = cross( localHalfVec, normal );
	half specLen = dot( specTemp, specTemp );
	half cscNH = inversesqrt( specLen );

	// calculate COT by multiplying CSC * COS, invert, multiply 2.5, and then calculate
	// the gaussian distribution term.
	half gaussian = 2.5 / ( cscNH * specularDP );
	gaussian *= -gaussian;
	gaussian = pow( 2.71828183, gaussian );
	gaussian *= specularDP;

	// multiply the specular color with the specular term we just calculated.
	specular *= gaussian;

	// add in the specular contribution.
	specular *= light;
	diffuse.rgb += specular;

	//----------------------------------------------------
	// Calculate light haze.
	//----------------------------------------------------
	diffuse.rgb = mix( diffuse.rgb, light.rgb, u_LightHaze.xxx );

	//----------------------------------------------------
	// Calculate fog.
	//----------------------------------------------------
	diffuse.rgb *= 1.0 - clamp( ( length( v_LocalEyeVec ).x - u_FogStart.x ) / u_FogRange.x, 0.0, 1.0 );

	gl_FragColor = diffuse;
}
